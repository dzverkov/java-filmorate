-- PUBLIC.RAITINGS definition

DROP TABLE IF EXISTS PUBLIC.FILM_LIKES;
DROP TABLE IF EXISTS PUBLIC.FILM_GENRES;
DROP TABLE IF EXISTS PUBLIC.FRIENDS;
DROP TABLE IF EXISTS PUBLIC.FILMS;
DROP TABLE IF EXISTS PUBLIC.USERS;
DROP TABLE IF EXISTS PUBLIC.MPA;
DROP TABLE IF EXISTS PUBLIC.GENRES;

CREATE TABLE IF NOT EXISTS PUBLIC.MPA
(
    MPA_ID INTEGER               NOT NULL AUTO_INCREMENT,
    NAME       CHARACTER VARYING(50) NOT NULL,
    CONSTRAINT MPA_PK PRIMARY KEY (MPA_ID)
);


-- PUBLIC.GENRES definition

CREATE TABLE IF NOT EXISTS PUBLIC.GENRES
(
    GENRE_ID INTEGER               NOT NULL AUTO_INCREMENT,
    NAME     CHARACTER VARYING(50) NOT NULL,
    CONSTRAINT GENRES_PK PRIMARY KEY (GENRE_ID)
);


-- PUBLIC.USERS definition

CREATE TABLE IF NOT EXISTS PUBLIC.USERS
(
    USER_ID  INTEGER               NOT NULL AUTO_INCREMENT,
    EMAIL    CHARACTER VARYING(30) NOT NULL,
    LOGIN    CHARACTER VARYING(30) NOT NULL,
    NAME     CHARACTER VARYING(50),
    BIRTHDAY DATE,
    CONSTRAINT USERS_PK PRIMARY KEY (USER_ID)
);


-- PUBLIC.FILMS definition

CREATE TABLE IF NOT EXISTS PUBLIC.FILMS
(
    FILM_ID      INTEGER AUTO_INCREMENT,
    NAME         CHARACTER VARYING(50) NOT NULL,
    DESCRIPTION  CHARACTER VARYING(200),
    RELEASE_DATE DATE                  NOT NULL,
    DURATION     INTEGER               NOT NULL,
    RATE        INTEGER               NOT NULL DEFAULT 0,
    MPA_ID    INTEGER,
    CONSTRAINT FILMS_PK PRIMARY KEY (FILM_ID),
    CONSTRAINT FILMS_FK FOREIGN KEY (MPA_ID) REFERENCES PUBLIC.MPA (MPA_ID)
);


-- PUBLIC.FILM_GENRES definition

CREATE TABLE IF NOT EXISTS PUBLIC.FILM_GENRES
(
    FILM_ID  INTEGER NOT NULL,
    GENRE_ID INTEGER NOT NULL,
    CONSTRAINT FILM_GENRES_UN UNIQUE (FILM_ID, GENRE_ID),
    CONSTRAINT FILM_GENRES_FILM_ID_FK FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS (FILM_ID),
    CONSTRAINT FILM_GENRES_GENRE_ID_FK FOREIGN KEY (GENRE_ID) REFERENCES PUBLIC.GENRES (GENRE_ID)
);
CREATE INDEX IF NOT EXISTS FILM_GENRES_FILM_ID_IDX ON PUBLIC.FILM_GENRES (FILM_ID);
CREATE INDEX IF NOT EXISTS FILM_GENRES_GENRE_ID_IDX ON PUBLIC.FILM_GENRES (GENRE_ID);


-- PUBLIC.FILM_LIKES definition

CREATE TABLE IF NOT EXISTS PUBLIC.FILM_LIKES
(
    FILM_ID INTEGER NOT NULL,
    USER_ID INTEGER NOT NULL,
    CONSTRAINT FILM_LIKES_UN UNIQUE (FILM_ID, USER_ID),
    CONSTRAINT FILM_LIKES_FILM_ID_FK FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS (FILM_ID),
    CONSTRAINT FILM_LIKES_USER_ID_FK FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS (USER_ID)
);
CREATE INDEX IF NOT EXISTS FILM_LIKES_FILM_ID_IDX ON PUBLIC.FILM_LIKES (FILM_ID);
CREATE INDEX IF NOT EXISTS FILM_LIKES_USER_ID_IDX ON PUBLIC.FILM_LIKES (USER_ID);


-- PUBLIC.FRIENDS definition

CREATE TABLE IF NOT EXISTS PUBLIC.FRIENDS
(
    USER_ID      INTEGER           NOT NULL,
    FRIEND_ID    INTEGER           NOT NULL,
    IS_CONFIRMED INTEGER DEFAULT 0 NOT NULL,
    CONSTRAINT FRIENDS_UN UNIQUE (USER_ID, FRIEND_ID),
    CHECK (USER_ID <> FRIEND_ID),
    CONSTRAINT FRIENDS_FK FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS (USER_ID),
    CONSTRAINT FRIENDS_FK_1 FOREIGN KEY (FRIEND_ID) REFERENCES PUBLIC.USERS (USER_ID)
);
CREATE INDEX IF NOT EXISTS FRIENDS_USER_ID_IDX ON PUBLIC.FRIENDS (USER_ID);
CREATE INDEX IF NOT EXISTS FRIENDS_FRIEND_ID_IDX ON PUBLIC.FRIENDS (FRIEND_ID);

